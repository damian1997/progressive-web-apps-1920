var serviceWorkerOption = {
  "assets": [
    "/main.53c8c7e8c64cf5014af3.css",
    "/main-21ccab0ebbc48ce7980c.bundle.js"
  ]
};
        
        !function(e){var n={};function t(r){if(n[r])return n[r].exports;var c=n[r]={i:r,l:!1,exports:{}};return e[r].call(c.exports,c,c.exports,t),c.l=!0,c.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var c in e)t.d(r,c,function(n){return e[n]}.bind(null,c));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(module,exports){eval("var CORE_CACHE_VERSION = 'v1';\nvar PREFIXEDASSETS = serviceWorkerOption.assets.map(function (asset) {\n  return \"/bundle\".concat(asset);\n});\nvar CORE_ASSETS = ['/offline', '/images/down-arrow.svg', '/images/manifest-design.png'].concat(PREFIXEDASSETS);\nself.addEventListener('install', function (event) {\n  console.log('Installing Service Worker');\n  event.waitUntil(caches.open(CORE_CACHE_VERSION).then(function (cache) {\n    return cache.addAll(CORE_ASSETS);\n  }).then(function () {\n    return self.skipWaiting();\n  }));\n});\nself.addEventListener('activate', function (event) {\n  console.log('Activating service worker');\n  event.waitUntil(clients.claim());\n});\nself.addEventListener('fetch', function (event) {\n  if (isCoreGetRequest(event.request)) {\n    console.log('Core get request: ', event.request.url);\n    event.respondWith(caches.open(CORE_CACHE_VERSION).then(function (cache) {\n      return cache.match(event.request.url);\n    }));\n  } else if (isHtmlGetRequest(event.request)) {\n    console.log('html get request', event.request.url);\n    event.respondWith(caches.open('html-cache').then(function (cache) {\n      return cache.match(event.request.url);\n    }).then(function (response) {\n      return response ? response : fetchAndCache(event.request, 'html-cache');\n    })[\"catch\"](function (e) {\n      return caches.open(CORE_CACHE_VERSION).then(function (cache) {\n        return cache.match('/offline');\n      });\n    }));\n  }\n});\n\nfunction fetchAndCache(request, cacheName) {\n  return fetch(request).then(function (response) {\n    if (!response.ok) {\n      throw new TypeError('Bad response status');\n    }\n\n    var clone = response.clone();\n    caches.open(cacheName).then(function (cache) {\n      return cache.put(request, clone);\n    });\n    return response;\n  });\n} // Check functions\n\n\nfunction isHtmlGetRequest(request) {\n  return request.method === 'GET' && request.headers.get('accept') !== null && request.headers.get('accept').indexOf('text/html') > -1;\n}\n\nfunction isCoreGetRequest(request) {\n  return request.method === 'GET' && CORE_ASSETS.includes(getPathName(request.url));\n}\n\nfunction getPathName(requestUrl) {\n  var url = new URL(requestUrl);\n  return url.pathname;\n}\n\n//# sourceURL=webpack:///./static/service-worker.js?")}]);